import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.2.4"

        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

<<<<<<< Updated upstream
=======
group "com.symentis.grails.plugins"
def versionTxt = file("${rootProject.projectDir}/version.txt")
version = versionTxt.exists() ? versionTxt.text.trim() : '0.1'
>>>>>>> Stashed changes

group "com.symentis"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"

// We publish to Sonatype (Maven Central) now.
apply plugin: 'maven-publish'
apply plugin: 'signing'

apply plugin:"org.asciidoctor.convert"

ext {
    grailsVersion = project.grailsVersion
}


repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"

    compileOnly "org.grails:grails-plugin-services"
    compileOnly "org.grails:grails-plugin-domain-class"

    provided "com.agileorbit:schwartz:${schwartzPluginVersion}"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
      '-Dspring.output.ansi.enabled=always',
      '-noverify',
      '-XX:TieredStopAtLevel=1',
      '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

bootJar.enabled = false

assets {
    packagePlugin = true
}

// Needed for org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6
// See https://github.com/asciidoctor/asciidoctorj/issues/415
asciidoctorj {
    version = '1.5.4'
}

static String buildDate() {
    def df = new SimpleDateFormat("yyyy-MM-dd")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'schwartz-monitor'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Grails Schwartz Monitor'
                description = 'Monitor Quartz Jobs. Supports Grails-Schwartz and Grails-Quartz.'
                url = 'https://github.com/symentis/grails-schwartz-monitor'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'symentis GmbH'
                        name = 'symentis GmbH'
                        email = 'developer@symentis.com'
                    }
                    developer {
                        id = 'roos'
                        name = 'Robert Oschwald'
                        email = 'roos@symentis.com'
                    }
                    developer {
                        id = 'elkr'
                        name = 'Elmar Kretzer'
                        email = 'elkr@symentis.com'
                    }
                    developer {
                        id = 'juba'
                        name = 'Juergen Baumann'
                        email = 'juba@symentis.com'
                    }
                    developer {
                        id = 'fesc'
                        name = 'Felix Scheinost'
                        email = 'fesc@symentis.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/symentis/grails-schwartz-monitor.git'
                    developerConnection = 'scm:git:ssh://github.com:symentis/grails-schwartz-monitor.git'
                    url = 'https://github.com/symentis/grails-schwartz-monitor/tree/main'
                }
            }
        }
    }
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : (System.getenv('SIGNING_PASSPHRASE')?:"${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

asciidoctor {
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
    outputDir new File(buildDir, 'docs')
    backends 'html5', 'pdf', 'epub3'
    attributes  copyright  : 'Apache License, Version 2.0',
      docinfo1             : 'true',
      doctype              : 'book',
      encoding             : 'utf-8',
      'front-cover-image'  : 'image:cover.png[Front Cover,800,600]',
      icons                : 'font',
      id                   : project.name + ':' + project.version,
      idprefix             : '',
      idseparator          : '-',
      lang                 : 'en',
      linkattrs            : true,
      numbered             : '',
      producer             : 'Asciidoctor',
      revnumber            : project.version,
      setanchors           : true,
      'source-highlighter'  : 'prettify',
      toc                  : 'left',
      toc2                 : '',
      toclevels            : '2'
}

task docs(dependsOn: 'asciidoctor') {
    doLast {
        File dir = new File(buildDir, 'docs')
        dir.mkdirs()

        ['pdf', 'epub'].each { String ext ->
            File f = new File(dir, 'index.' + ext)
            if (f.exists()) {
                f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
            }
        }

        new File(buildDir, 'docs/ghpages.html') << file('src/docs/templates/index.tmpl').text.replaceAll("@VERSION@", project.version).replaceAll("@DOCDATE@", buildDate())

        copy {
            from 'src/docs'
            into new File(buildDir, 'docs').path
            include '**/*.png'
        }
    }
}






